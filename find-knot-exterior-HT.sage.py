

# This file was *autogenerated* from the file find-knot-exterior-HT.sage
from sage.all_cmdline import *   # import sage library

_sage_const_7 = Integer(7); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_0 = Integer(0)#Run through the Snappy CensusKnots database of knot exteriors
from snappy import *
b=BraidGroup(_sage_const_7 )([_sage_const_1 , _sage_const_2 , _sage_const_1 , -_sage_const_2 , _sage_const_3 , _sage_const_2 , _sage_const_1 , -_sage_const_2 , -_sage_const_3 , _sage_const_4 , _sage_const_3 , _sage_const_2 , _sage_const_1 , -_sage_const_2 , -_sage_const_3 , -_sage_const_4 , _sage_const_5 , _sage_const_4 , _sage_const_3 , _sage_const_2 , -_sage_const_3 , -_sage_const_4 , -_sage_const_5 , _sage_const_6 , _sage_const_5 , _sage_const_4 , _sage_const_3 , -_sage_const_4 , -_sage_const_5 , -_sage_const_6 ])
M = Manifold('Braid%s(2,0)(0,0)'%(list(b.Tietze())))
homologyZZ = lambda Y: Y.homology().elementary_divisors() == [_sage_const_0 ]
coverlist = list(filter(homologyZZ, M.covers(_sage_const_2 )))
M = coverlist[_sage_const_0 ]

def check_knot_exterior():
    manifoldfound = False
    exterior_list = []
    for N in LinkExteriors:
        if M.is_isometric_to(N) == True:
            exterior_list.append(N)
            print("knot exterior found, the knot is ")
            manifoldfound = True
    
    if manifoldfound == False:
        print("no knot exterior found")
        return False
    else:
        print("%d knot exterior found"%(len(exterior_list)))
        print(exterior_list)
        return True
    
print(check_knot_exterior())

